---
layout: post
title:  "Node.js needs a better way to handle timeout events"
date:   2014-11-23 15:08:46
categories: jekyll update
---
Last week I was building a web scraper which scrapes particular section of the website to get information from the page and I was using cheerio (npm module ) for parsing html .

But the problem was that website that I was trying to scrape blocks the ip address of the scrapping program when I was trying to send more than 5 requests per second so I had to control number of requests that I send to the website.

The best way to achieve this is to use threads and pause them after certain number of requests but in node.js we do not have threads because node itself is single threaded process and every callbacks gets into event loop .

So I thought of using setTimeout to control the number of requests but the way setTimeout works is it stops the entire event loop ( I mean it stops EVERYTHING ) during the period of time out. You can check John Resigâ€™s article on How JavaScript Timers Work [link](http://ejohn.org/blog/how-javascript-timers-work/) . It adds all processing functions into a stack ( in memory ) and if the number of processes exceeds the size of memory then it starts to leak memory ( one of the famous problem of node js)

Imagine that you have node server which handles your live traffic and you have some process which works on some logic where it has to stop certain while inorder to process something then when the node server is timeouted for certain while then it can not handle anymore requests because whole event loop is stopped.

So I rewrote that whole crawler using Tornado(Python project for asynchronous programming ). The best thing about Tornado is it has async timeout which pauses only that certain event in the event loop rather than blocking whole event loop.

Example Code:
{% highlight python %}

@tornado.gen.coroutine
def async_sleep(timeout):
    yield tornado.gen.Task(tornado.ioloop.IOLoop.instance().add_timeout, time.time() + timeout)

{% endhighlight %}

You can use async_sleep(time_that_you_want_to_wait) to sleep only that particular event ( how awesome is that ? )

I hope node community finds a good solution for this problem .

If you have a better way to achieve async time in node please drop a mail to pnaditya@gmail.com.

